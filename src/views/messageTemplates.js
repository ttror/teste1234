/**
 * Message Templates (View)
 * Templates de mensagens para WhatsApp
 */

const { formatCPF, formatDateOnly, formatDate } = require('../utils/helpers');

/**
 * Template de boas-vindas
 */
function welcomeMessage(userName = '') {
  const greeting = userName ? `Ol√°, ${userName}!` : 'Ol√°!';
  return `üëã ${greeting}

Bem-vindo(a) ao *Chatbot Psicol√≥gico*!

Sou seu assistente virtual para acompanhamento de pacientes e gest√£o de informa√ß√µes cl√≠nicas.

Digite *MENU* para come√ßar.`;
}

/**
 * Template do menu principal
 */
function mainMenu() {
  return `ü§ñ *CHATBOT PSICOL√ìGICO*

Como posso ajudar?

1Ô∏è‚É£ Consultar Paciente (CPF)
2Ô∏è‚É£ Evolu√ß√£o Di√°ria
3Ô∏è‚É£ Gerar Relat√≥rio
4Ô∏è‚É£ Nova Sess√£o
5Ô∏è‚É£ Listar Pacientes
6Ô∏è‚É£ Ajuda

Digite o n√∫mero da op√ß√£o desejada.`;
}

/**
 * Template de ajuda
 */
function helpMessage() {
  return `‚ÑπÔ∏è *AJUDA*

*Como usar:*
‚Ä¢ Digite o n√∫mero da op√ß√£o no menu
‚Ä¢ Para consultar paciente, informe o CPF
‚Ä¢ Para iniciar sess√£o, siga as instru√ß√µes

*Op√ß√µes dispon√≠veis:*

1Ô∏è‚É£ *Consultar Paciente*
   Busca informa√ß√µes completas de um paciente pelo CPF

2Ô∏è‚É£ *Evolu√ß√£o Di√°ria*
   Visualiza evolu√ß√£o em tempo real do paciente

3Ô∏è‚É£ *Gerar Relat√≥rio*
   Cria relat√≥rios cl√≠nicos detalhados

4Ô∏è‚É£ *Nova Sess√£o*
   Inicia sess√£o de atendimento com IA

5Ô∏è‚É£ *Listar Pacientes*
   Mostra todos os pacientes cadastrados

6Ô∏è‚É£ *Ajuda*
   Exibe esta mensagem de ajuda

Digite *MENU* a qualquer momento para voltar ao menu principal.`;
}

/**
 * Template de solicita√ß√£o de CPF
 */
function requestCPF() {
  return `üîç *CONSULTAR PACIENTE*

Por favor, informe o CPF do paciente:

Formato: 12345678900 ou 123.456.789-00

Digite *MENU* para cancelar.`;
}

/**
 * Template de CPF inv√°lido
 */
function invalidCPF() {
  return `‚ùå *CPF INV√ÅLIDO*

O CPF informado n√£o √© v√°lido.

Por favor, informe um CPF v√°lido com 11 d√≠gitos.

Exemplo: 12345678900`;
}

/**
 * Template de paciente n√£o encontrado
 */
function patientNotFound(cpf) {
  return `‚ùå *PACIENTE N√ÉO ENCONTRADO*

N√£o foi encontrado nenhum paciente com o CPF: ${formatCPF(cpf)}

Verifique o CPF e tente novamente ou digite *MENU* para voltar.`;
}

/**
 * Template de dados do paciente
 */
function patientData(patient) {
  return `üë§ *DADOS DO PACIENTE*

*Nome:* ${patient.name}
*CPF:* ${formatCPF(patient.cpf)}
*Diagn√≥stico:* ${patient.diagnosis}

üìä *Status Atual:*
${patient.currentStatus}

üìÖ *Cadastrado em:* ${formatDateOnly(patient.createdAt)}
üîÑ *√öltima atualiza√ß√£o:* ${formatDateOnly(patient.updatedAt)}
üìù *Total de evolu√ß√µes:* ${patient.history.length}

Digite *MENU* para voltar.`;
}

/**
 * Template de hist√≥rico de evolu√ß√£o
 */
function evolutionHistory(patient) {
  let message = `üìà *HIST√ìRICO DE EVOLU√á√ÉO*\n\n`;
  message += `*Paciente:* ${patient.name}\n`;
  message += `*CPF:* ${formatCPF(patient.cpf)}\n\n`;
  message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;

  if (!patient.history || patient.history.length === 0) {
    message += `‚ùå Nenhuma evolu√ß√£o registrada.\n\n`;
  } else {
    patient.history.forEach((evolution, index) => {
      message += `*${index + 1}. ${formatDateOnly(evolution.date)}*\n`;
      message += `${evolution.description}\n\n`;
      if (index < patient.history.length - 1) {
        message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
      }
    });
  }

  message += `Digite *MENU* para voltar.`;
  return message;
}

/**
 * Template de √∫ltima evolu√ß√£o
 */
function lastEvolution(patient) {
  if (!patient.history || patient.history.length === 0) {
    return `‚ùå *NENHUMA EVOLU√á√ÉO REGISTRADA*

O paciente ${patient.name} ainda n√£o possui evolu√ß√µes registradas.

Digite *MENU* para voltar.`;
  }

  const evolution = patient.history[patient.history.length - 1];
  
  return `üìä *√öLTIMA EVOLU√á√ÉO*

*Paciente:* ${patient.name}
*Data:* ${formatDateOnly(evolution.date)}

${evolution.description}

Digite *MENU* para voltar.`;
}

/**
 * Template de relat√≥rio
 */
function reportMessage(report) {
  return `üìã *RELAT√ìRIO GERADO*

*Tipo:* ${report.type}
*Data:* ${formatDate(report.createdAt)}
*Paciente CPF:* ${formatCPF(report.patientCpf)}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

${report.content}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

*ID do Relat√≥rio:* ${report.id}

Digite *MENU* para voltar.`;
}

/**
 * Template de lista de pacientes
 */
function patientList(patients) {
  if (!patients || patients.length === 0) {
    return `‚ùå *NENHUM PACIENTE CADASTRADO*

N√£o h√° pacientes cadastrados no sistema.

Digite *MENU* para voltar.`;
  }

  let message = `üìã *LISTA DE PACIENTES*\n\n`;
  message += `Total: ${patients.length} paciente(s)\n\n`;
  message += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;

  patients.forEach((patient, index) => {
    message += `*${index + 1}. ${patient.name}*\n`;
    message += `CPF: ${formatCPF(patient.cpf)}\n`;
    message += `Diagn√≥stico: ${patient.diagnosis}\n`;
    message += `√öltima atualiza√ß√£o: ${formatDateOnly(patient.updatedAt)}\n\n`;
  });

  message += `Digite *MENU* para voltar.`;
  return message;
}

/**
 * Template de sess√£o iniciada
 */
function sessionStarted(patientName) {
  return `‚úÖ *SESS√ÉO INICIADA*

Sess√£o de atendimento iniciada com sucesso!

*Paciente:* ${patientName}

Voc√™ pode conversar livremente agora. Fa√ßa perguntas sobre o paciente ou solicite an√°lises.

Digite *FINALIZAR* para encerrar a sess√£o.`;
}

/**
 * Template de sess√£o finalizada
 */
function sessionEnded(duration) {
  return `‚úÖ *SESS√ÉO FINALIZADA*

A sess√£o foi encerrada com sucesso.

*Dura√ß√£o:* ${duration} minuto(s)

Digite *MENU* para voltar ao menu principal.`;
}

/**
 * Template de erro gen√©rico
 */
function errorMessage(error = '') {
  const errorText = error ? `\n\nDetalhes: ${error}` : '';
  return `‚ùå *ERRO*

Ocorreu um erro ao processar sua solicita√ß√£o.${errorText}

Por favor, tente novamente ou digite *MENU* para voltar.`;
}

/**
 * Template de op√ß√£o inv√°lida
 */
function invalidOption() {
  return `‚ùå *OP√á√ÉO INV√ÅLIDA*

Por favor, escolha uma op√ß√£o v√°lida do menu (1-6).

Digite *MENU* para ver as op√ß√µes novamente.`;
}

/**
 * Template de processando
 */
function processingMessage() {
  return `‚è≥ Processando sua solicita√ß√£o...

Por favor, aguarde um momento.`;
}

/**
 * Template de escolha de tipo de relat√≥rio
 */
function chooseReportType() {
  return `üìã *GERAR RELAT√ìRIO*

Escolha o tipo de relat√≥rio:

1Ô∏è‚É£ Relat√≥rio Di√°rio
2Ô∏è‚É£ Relat√≥rio Semanal
3Ô∏è‚É£ Relat√≥rio Mensal
4Ô∏è‚É£ Relat√≥rio Geral

Digite o n√∫mero da op√ß√£o ou *MENU* para cancelar.`;
}

module.exports = {
  welcomeMessage,
  mainMenu,
  helpMessage,
  requestCPF,
  invalidCPF,
  patientNotFound,
  patientData,
  evolutionHistory,
  lastEvolution,
  reportMessage,
  patientList,
  sessionStarted,
  sessionEnded,
  errorMessage,
  invalidOption,
  processingMessage,
  chooseReportType
};

